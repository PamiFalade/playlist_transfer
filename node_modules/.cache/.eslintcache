[{"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/index.js":"1","/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/App.js":"2","/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/reportWebVitals.js":"3","/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/Landing.js":"4","/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/webService.js":"5","/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/platformServices/spotifyService.js":"6"},{"size":582,"mtime":1650643809183,"results":"7","hashOfConfig":"8"},{"size":192,"mtime":1650870660076,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1650391817756,"results":"10","hashOfConfig":"8"},{"size":9945,"mtime":1651596817672,"results":"11","hashOfConfig":"8"},{"size":5087,"mtime":1651597141456,"results":"12","hashOfConfig":"8"},{"size":1176,"mtime":1651597155137,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"addlp4",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/index.js",[],[],[],"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/App.js",[],[],"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/reportWebVitals.js",[],[],"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/Landing.js",["36","37","38","39","40","41","42","43","44","45","46","47"],[],"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/webService.js",["48","49"],[],"import { Buffer } from \"buffer\";\nimport * as spotify from \"./platformServices/spotifyService\";\n\n//Object used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_playlistID_regex: \"\",\n  deezer_clientID: \"539962\",\n  deezer_secret: \"64fa6e122f54fd5144866dd4e5bd8109\",\n};\n\n//Object used to store the regex patterns needed to extract info from url's\nconst regexes = {\n  spotify_playlistID_regex: \"(?<=t/)(.*?)(?=\\\\?)\",\n  apple_playlistID_regex: \"\",\n};\n\n//This function sets up the clientID and secret depending on which platform is specified\nconst setupCredentials = (source) => {\n  let required_clientID = \"\";\n  let required_secret = \"\";\n\n  //Select the correct values\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return { clientID: required_clientID, secret: required_secret };\n};\n\n//Get the Spotify access token\nconst fetchSpotifyToken = (searchData) => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  let token; //Variable that will hold the promise returned by the fetch function\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return tokenResponse; //Return the promise that the fetch function returns\n};\n\n//Get the Apple Music access token\nconst fetchAppleToken = (searchData) => {};\n\n//Function to get the required credentials (client ID, secret, and access token)\n//Made it an async function so that we can wait for the fetching of the access token to finish before returning it\nexport const setupToken = async (source) => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n  let tokenPromise; //Variable that will hold the promise returned from the fetch API\n  let token = \"\"; //Variable used to hold access token from source platform\n\n  //Get the access token from the right api based on the source\n  if (source === \"spotify\") {\n    tokenPromise = await fetchSpotifyToken(searchData); //await will make the code wait for the fetch function to resolve/reject the promise, but for it to work it needs to return a promise\n  } else if (source === \"apple\") {\n    tokenPromise = await fetchAppleToken(searchData);\n  }\n\n  token = tokenPromise.access_token;\n  return { ...searchData, token };\n};\n\n//Extract the unique playlist ID from the url using the right regex pattern\nconst extractPlaylistID = (link, source) => {\n  let playlistID = \"\";\n\n  //Extract the playlist ID from the share link\n  if (source === \"spotify\") {\n    const regex = new RegExp(regexes.spotify_playlistID_regex); //Select the spotify playlist ID regex\n    playlistID = link.match(regex)[0];\n  }\n  // else if (source === \"apple\") {\n  //   const regex = new RegExp(regexes.apple_playlistID_regex);\n  //   plalylistID = link.match(regex);\n  //   console.log(playlistID);\n  // }\n\n  return playlistID;\n};\n\nexport const fetchPlaylist = (link, token, source) => {\n  const playlistID = extractPlaylistID(link, source);\n\n  return fetch(`https://api.spotify.com/v1/playlists/${playlistID}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n  })\n    .then((playlistResponse) => {\n      if (playlistResponse.ok) {\n        console.log(\"Retrieved playlist successfully\");\n      } else console.log(\"Error with retrieving playlist\");\n      return playlistResponse.json();\n    })\n    .catch((error) => console.log(error));\n};\n\n//This function is used to fetch all the tracks of a playlist which has more songs than the fetch limit\nexport const fetchTracks = (nextPage, token, source) => {\n  return fetch(nextPage, {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n  })\n    .then((tracksResponse) => {\n      if (tracksResponse.ok) {\n        console.log(\"Retrieved the rest of the tracks successfully\");\n      } else {\n        console.log(\"Error with retrieving the rest of the tracks\");\n      }\n      return tracksResponse.json();\n    })\n    .catch((error) => console.log(error));\n};\n",[],"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/platformServices/spotifyService.js",["50","51","52","53"],[],"const clientID = \"9a5c9f439d464286b0b08e0f40de4f4a\";\nconst secret = \"c24f98c34e26485db177b530895c1769\";\nconst regex = \"(?<=t/)(.*?)(?=\\\\?)\";\n\nexport const fetchSpotifyToken = (searchData) => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  let token; //Variable that will hold the promise returned by the fetch function\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return tokenResponse; //Return the promise that the fetch function returns\n};\n\n\n",{"ruleId":"54","severity":1,"message":"55","line":8,"column":10,"nodeType":"56","messageId":"57","endLine":8,"endColumn":16},{"ruleId":"54","severity":1,"message":"58","line":26,"column":10,"nodeType":"56","messageId":"57","endLine":26,"endColumn":14},{"ruleId":"54","severity":1,"message":"59","line":34,"column":10,"nodeType":"56","messageId":"57","endLine":34,"endColumn":21},{"ruleId":"54","severity":1,"message":"60","line":37,"column":9,"nodeType":"56","messageId":"57","endLine":37,"endColumn":21},{"ruleId":"54","severity":1,"message":"61","line":124,"column":9,"nodeType":"56","messageId":"57","endLine":124,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":148,"column":15,"nodeType":"64","endLine":151,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":152,"column":15,"nodeType":"64","endLine":155,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":156,"column":15,"nodeType":"64","endLine":159,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":171,"column":15,"nodeType":"64","endLine":174,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":175,"column":15,"nodeType":"64","endLine":178,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":179,"column":15,"nodeType":"64","endLine":182,"endColumn":17},{"ruleId":"62","severity":1,"message":"63","line":253,"column":19,"nodeType":"64","endLine":253,"endColumn":54},{"ruleId":"54","severity":1,"message":"65","line":2,"column":13,"nodeType":"56","messageId":"57","endLine":2,"endColumn":20},{"ruleId":"54","severity":1,"message":"66","line":41,"column":7,"nodeType":"56","messageId":"57","endLine":41,"endColumn":12},{"ruleId":"54","severity":1,"message":"67","line":1,"column":7,"nodeType":"56","messageId":"57","endLine":1,"endColumn":15},{"ruleId":"54","severity":1,"message":"68","line":2,"column":7,"nodeType":"56","messageId":"57","endLine":2,"endColumn":13},{"ruleId":"54","severity":1,"message":"69","line":3,"column":7,"nodeType":"56","messageId":"57","endLine":3,"endColumn":12},{"ruleId":"54","severity":1,"message":"66","line":7,"column":7,"nodeType":"56","messageId":"57","endLine":7,"endColumn":12},"no-unused-vars","'Buffer' is defined but never used.","Identifier","unusedVar","'dest' is assigned a value but never used.","'sourceToken' is assigned a value but never used.","'playlistLink' is assigned a value but never used.","'errors' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'spotify' is defined but never used.","'token' is defined but never used.","'clientID' is assigned a value but never used.","'secret' is assigned a value but never used.","'regex' is assigned a value but never used."]