{"ast":null,"code":"import { Buffer } from \"buffer\"; //Object used to store the clientIDs and secrets of the various platforms\n\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_playlistID_regex: \"\",\n  deezer_clientID: \"539962\",\n  deezer_secret: \"64fa6e122f54fd5144866dd4e5bd8109\"\n}; //Object used to store the regex patterns needed to extract info from url's\n\nconst regexes = {\n  spotify_playlistID_regex: \"(?<=t/)(.*?)(?=\\\\?)\",\n  apple_playlistID_regex: \"\"\n}; //This function sets up the clientID and secret depending on which platform is specified\n\nconst setupCredentials = source => {\n  let required_clientID = \"\";\n  let required_secret = \"\"; //Select the correct values\n\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return {\n    clientID: required_clientID,\n    secret: required_secret\n  };\n}; //Get the Spotify access token\n\n\nconst fetchSpotifyToken = searchData => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n\n  let token; //Variable that will hold the promise returned by the fetch function\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`\n    },\n    body: \"grant_type=client_credentials\"\n  }).then(tokenResponse => {\n    if (tokenResponse.ok) console.log(\"Successful\");else console.log(\"Not successful\");\n    return tokenResponse.json();\n  }).catch(error => {\n    console.log(error);\n  });\n  return tokenResponse; //Return the promise that the fetch function returns\n}; //Get the Apple Music access token\n\n\nconst fetchAppleToken = searchData => {}; //Function to get the required credentials (client ID, secret, and access token)\n//Made it an async function so that we can wait for the fetching of the access token to finish before returning it\n\n\nexport const setupToken = async source => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n\n  let tokenPromise; //Variable that will hold the promise returned from the fetch API\n\n  let token = \"\"; //Variable used to hold access token from source platform\n  //Get the access token from the right api based on the source\n\n  if (source === \"spotify\") {\n    tokenPromise = await fetchSpotifyToken(searchData); //await will make the code wait for the fetch function to resolve/reject the promise, but for it to work it needs to return a promise\n  } else if (source === \"apple\") {\n    tokenPromise = await fetchAppleToken(searchData);\n  }\n\n  token = tokenPromise.access_token;\n  return { ...searchData,\n    token\n  };\n}; //Extract the unique playlist ID from the url using the right regex pattern\n\nconst extractPlaylistID = (link, source) => {\n  let playlistID = \"\"; //Extract the playlist ID from the share link\n\n  if (source === \"spotify\") {\n    const regex = new RegExp(regexes.spotify_playlistID_regex); //Select the spotify playlist ID regex\n\n    playlistID = link.match(regex)[0];\n  } // else if (source === \"apple\") {\n  //   const regex = new RegExp(regexes.apple_playlistID_regex);\n  //   plalylistID = link.match(regex);\n  //   console.log(playlistID);\n  // }\n\n\n  return playlistID;\n};\n\nexport const fetchPlaylist = (link, token, source) => {\n  const playlistID = extractPlaylistID(link, source);\n  return fetch(`https://api.spotify.com/v1/playlists/${playlistID}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    }\n  }).then(playlistResponse => {\n    if (playlistResponse.ok) {\n      console.log(\"Retrieved playlist successfully\");\n    } else console.log(\"Error with retrieving playlist\");\n\n    return playlistResponse.json();\n  }).catch(error => console.log(error));\n}; //This function is used to fetch all the tracks of a playlist which has more songs than the fetch limit\n\nexport const fetchTracks = (link, token, source, offset) => {\n  const playlistID = extractPlaylistID(link, source); //\"https://api.spotify.com/v1/playlists/5xLiUVHJN3HSaTx9uRMJ3B/tracks?offset=0&limit=100&locale=en-CA,en-GB;q=0.9,en-US;q=0.8,en;q=0.7\"\n\n  return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks?offset=${offset}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    }\n  }).then(tracksResponse => {\n    if (tracksResponse.ok) {\n      console.log(\"Retrieved the rest of the tracks successfully\");\n    } else {\n      console.log(\"Error with retrieving the rest of the tracks\");\n    }\n\n    console.log(tracksResponse);\n  });\n};","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/webService.js"],"names":["Buffer","credentials","spotify_clientID","spotify_secret","apple_clientID","apple_secret","apple_playlistID_regex","deezer_clientID","deezer_secret","regexes","spotify_playlistID_regex","setupCredentials","source","required_clientID","required_secret","clientID","secret","fetchSpotifyToken","searchData","stringToEncode","token","tokenResponse","fetch","method","headers","Authorization","from","toString","body","then","ok","console","log","json","catch","error","fetchAppleToken","setupToken","tokenPromise","access_token","extractPlaylistID","link","playlistID","regex","RegExp","match","fetchPlaylist","playlistResponse","fetchTracks","offset","tracksResponse"],"mappings":"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","sourcesContent":["import { Buffer } from \"buffer\";\n\n//Object used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_playlistID_regex: \"\",\n  deezer_clientID: \"539962\",\n  deezer_secret: \"64fa6e122f54fd5144866dd4e5bd8109\",\n};\n\n//Object used to store the regex patterns needed to extract info from url's\nconst regexes = {\n  spotify_playlistID_regex: \"(?<=t/)(.*?)(?=\\\\?)\",\n  apple_playlistID_regex: \"\",\n};\n\n//This function sets up the clientID and secret depending on which platform is specified\nconst setupCredentials = (source) => {\n  let required_clientID = \"\";\n  let required_secret = \"\";\n\n  //Select the correct values\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return { clientID: required_clientID, secret: required_secret };\n};\n\n//Get the Spotify access token\nconst fetchSpotifyToken = (searchData) => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  let token; //Variable that will hold the promise returned by the fetch function\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return tokenResponse; //Return the promise that the fetch function returns\n};\n\n//Get the Apple Music access token\nconst fetchAppleToken = (searchData) => {};\n\n//Function to get the required credentials (client ID, secret, and access token)\n//Made it an async function so that we can wait for the fetching of the access token to finish before returning it\nexport const setupToken = async (source) => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n  let tokenPromise; //Variable that will hold the promise returned from the fetch API\n  let token = \"\"; //Variable used to hold access token from source platform\n\n  //Get the access token from the right api based on the source\n  if (source === \"spotify\") {\n    tokenPromise = await fetchSpotifyToken(searchData); //await will make the code wait for the fetch function to resolve/reject the promise, but for it to work it needs to return a promise\n  } else if (source === \"apple\") {\n    tokenPromise = await fetchAppleToken(searchData);\n  }\n\n  token = tokenPromise.access_token;\n  return { ...searchData, token };\n};\n\n//Extract the unique playlist ID from the url using the right regex pattern\nconst extractPlaylistID = (link, source) => {\n  let playlistID = \"\";\n\n  //Extract the playlist ID from the share link\n  if (source === \"spotify\") {\n    const regex = new RegExp(regexes.spotify_playlistID_regex); //Select the spotify playlist ID regex\n    playlistID = link.match(regex)[0];\n  }\n  // else if (source === \"apple\") {\n  //   const regex = new RegExp(regexes.apple_playlistID_regex);\n  //   plalylistID = link.match(regex);\n  //   console.log(playlistID);\n  // }\n\n  return playlistID;\n};\n\nexport const fetchPlaylist = (link, token, source) => {\n  const playlistID = extractPlaylistID(link, source);\n\n  return fetch(`https://api.spotify.com/v1/playlists/${playlistID}`, {\n    method: \"GET\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: \"Bearer \" + token,\n    },\n  })\n    .then((playlistResponse) => {\n      if (playlistResponse.ok) {\n        console.log(\"Retrieved playlist successfully\");\n      } else console.log(\"Error with retrieving playlist\");\n      return playlistResponse.json();\n    })\n    .catch((error) => console.log(error));\n};\n\n//This function is used to fetch all the tracks of a playlist which has more songs than the fetch limit\nexport const fetchTracks = (link, token, source, offset) => {\n  const playlistID = extractPlaylistID(link, source);\n  //\"https://api.spotify.com/v1/playlists/5xLiUVHJN3HSaTx9uRMJ3B/tracks?offset=0&limit=100&locale=en-CA,en-GB;q=0.9,en-US;q=0.8,en;q=0.7\"\n  return fetch(\n    `https://api.spotify.com/v1/playlists/${playlistID}/tracks?offset=${offset}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: \"Bearer \" + token,\n      },\n    }\n  ).then((tracksResponse) => {\n    if (tracksResponse.ok) {\n      console.log(\"Retrieved the rest of the tracks successfully\");\n    } else {\n      console.log(\"Error with retrieving the rest of the tracks\");\n    }\n    console.log(tracksResponse)\n  });\n};\n"]},"metadata":{},"sourceType":"module"}