{"ast":null,"code":"const clientID = \"9a5c9f439d464286b0b08e0f40de4f4a\";\nconst secret = \"c24f98c34e26485db177b530895c1769\";\nconst regex = \"(?<=t/)(.*?)(?=\\\\?)\";\nexport const fetchSpotifyToken = searchData => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n\n  let token; //Variable that will hold the promise returned by the fetch function\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`\n    },\n    body: \"grant_type=client_credentials\"\n  }).then(tokenResponse => {\n    if (tokenResponse.ok) console.log(\"Successful\");else console.log(\"Not successful\");\n    return tokenResponse.json();\n  }).catch(error => {\n    console.log(error);\n  });\n  return tokenResponse; //Return the promise that the fetch function returns\n};","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/models/platformServices/spotifyService.js"],"names":["clientID","secret","regex","fetchSpotifyToken","searchData","stringToEncode","token","tokenResponse","fetch","method","headers","Authorization","Buffer","from","toString","body","then","ok","console","log","json","catch","error"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,MAAM,GAAG,kCAAf;AACA,MAAMC,KAAK,GAAG,qBAAd;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,UAAD,IAAgB;AAC/C,MAAIC,cAAc,GAAI,GAAED,UAAU,CAACJ,QAAS,IAAGI,UAAU,CAACH,MAAO,EAAjE,CAD+C,CACqB;;AACpE,MAAIK,KAAJ,CAF+C,CAEpC;AAEX;;AACA,MAAIC,aAAa,GAAGC,KAAK,CAAC,wCAAD,EAA2C;AAClEC,IAAAA,MAAM,EAAE,MAD0D;AAElEC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEPC,MAAAA,aAAa,EAAG,SAAQC,MAAM,CAACC,IAAP,CAAYR,cAAZ,EAA4BS,QAA5B,CAAqC,QAArC,CAA+C;AAFhE,KAFyD;AAMlEC,IAAAA,IAAI,EAAE;AAN4D,GAA3C,CAAL,CAQjBC,IARiB,CAQXT,aAAD,IAAmB;AACvB,QAAIA,aAAa,CAACU,EAAlB,EAAsBC,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAtB,KACKD,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACL,WAAOZ,aAAa,CAACa,IAAd,EAAP;AACD,GAZiB,EAajBC,KAbiB,CAaVC,KAAD,IAAW;AAChBJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD,GAfiB,CAApB;AAiBA,SAAOf,aAAP,CAtB+C,CAsBzB;AACvB,CAvBM","sourcesContent":["const clientID = \"9a5c9f439d464286b0b08e0f40de4f4a\";\nconst secret = \"c24f98c34e26485db177b530895c1769\";\nconst regex = \"(?<=t/)(.*?)(?=\\\\?)\";\n\nexport const fetchSpotifyToken = (searchData) => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  let token; //Variable that will hold the promise returned by the fetch function\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return tokenResponse; //Return the promise that the fetch function returns\n};\n"]},"metadata":{},"sourceType":"module"}