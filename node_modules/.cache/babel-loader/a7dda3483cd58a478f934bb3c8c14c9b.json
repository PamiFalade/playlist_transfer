{"ast":null,"code":"//List used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  spotify_token: \"\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_token: \"\"\n}; //This function sets up the clientID and secret depending on which platform is specified\n\nconst setupCredentials = source => {\n  let required_clientID = `credentials.${source}_clientID`;\n  let required_secret = `credentials.${source}_secret`;\n  return {\n    clientID: `${required_clientID}`,\n    secret: `${required_secret}`\n  };\n};\n\nconst fetchSpotifyToken = () => {\n  let token = {}; //The Spotify token will be returned with this variable\n  //Get the playlist using the fetch API and appropriate music platform API\n  //Headers and body set up according to how Spotify requires it\n\n  fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${searchData.clientID}:${searchData.secret}`\n    },\n    body: \"grant_type=client_credentials\"\n  }).then(tokenResponse => {\n    console.log(tokenResponse.data.access_token);\n    credentials.spotify_token = tokenResponse.data.access_token;\n  });\n  return token;\n};\n\nexport const setupToken = source => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n};","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist_transfer/src/models/webService.js"],"names":["credentials","spotify_clientID","spotify_secret","spotify_token","apple_clientID","apple_secret","apple_token","setupCredentials","source","required_clientID","required_secret","clientID","secret","fetchSpotifyToken","token","fetch","method","headers","Authorization","searchData","body","then","tokenResponse","console","log","data","access_token","setupToken"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,gBAAgB,EAAE,kCADA;AAElBC,EAAAA,cAAc,EAAE,kCAFE;AAGlBC,EAAAA,aAAa,EAAE,EAHG;AAIlBC,EAAAA,cAAc,EAAE,EAJE;AAKlBC,EAAAA,YAAY,EAAE,EALI;AAMlBC,EAAAA,WAAW,EAAE;AANK,CAApB,C,CASA;;AACA,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AACnC,MAAIC,iBAAiB,GAAI,eAAcD,MAAO,WAA9C;AACA,MAAIE,eAAe,GAAI,eAAcF,MAAO,SAA5C;AAEA,SAAO;AAAEG,IAAAA,QAAQ,EAAG,GAAEF,iBAAkB,EAAjC;AAAoCG,IAAAA,MAAM,EAAG,GAAEF,eAAgB;AAA/D,GAAP;AACD,CALD;;AAOA,MAAMG,iBAAiB,GAAG,MAAM;AAC9B,MAAIC,KAAK,GAAG,EAAZ,CAD8B,CACd;AAEhB;AACA;;AACAC,EAAAA,KAAK,CAAC,wCAAD,EAA2C;AAC9CC,IAAAA,MAAM,EAAE,MADsC;AAE9CC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEPC,MAAAA,aAAa,EAAG,SAAQC,UAAU,CAACR,QAAS,IAAGQ,UAAU,CAACP,MAAO;AAF1D,KAFqC;AAM9CQ,IAAAA,IAAI,EAAE;AANwC,GAA3C,CAAL,CAOGC,IAPH,CAOSC,aAAD,IAAmB;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAa,CAACG,IAAd,CAAmBC,YAA/B;AACA1B,IAAAA,WAAW,CAACG,aAAZ,GAA4BmB,aAAa,CAACG,IAAd,CAAmBC,YAA/C;AACD,GAVD;AAYA,SAAOZ,KAAP;AACD,CAlBD;;AAoBA,OAAO,MAAMa,UAAU,GAAInB,MAAD,IAAY;AACpC,MAAIW,UAAU,GAAGZ,gBAAgB,CAACC,MAAD,CAAjC,CADoC,CACO;AAC5C,CAFM","sourcesContent":["//List used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  spotify_token: \"\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_token: \"\",\n};\n\n//This function sets up the clientID and secret depending on which platform is specified\nconst setupCredentials = (source) => {\n  let required_clientID = `credentials.${source}_clientID`;\n  let required_secret = `credentials.${source}_secret`;\n\n  return { clientID: `${required_clientID}`, secret: `${required_secret}` };\n};\n\nconst fetchSpotifyToken = () => {\n  let token = {}; //The Spotify token will be returned with this variable\n\n  //Get the playlist using the fetch API and appropriate music platform API\n  //Headers and body set up according to how Spotify requires it\n  fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${searchData.clientID}:${searchData.secret}`,\n    },\n    body: \"grant_type=client_credentials\",\n  }).then((tokenResponse) => {\n    console.log(tokenResponse.data.access_token);\n    credentials.spotify_token = tokenResponse.data.access_token;\n  });\n\n  return token;\n};\n\nexport const setupToken = (source) => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n};\n"]},"metadata":{},"sourceType":"module"}