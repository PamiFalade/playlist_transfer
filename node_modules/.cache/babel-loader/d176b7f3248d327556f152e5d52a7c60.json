{"ast":null,"code":"import { Buffer } from \"buffer\"; //List used to store the clientIDs and secrets of the various platforms\n\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  spotify_token: \"\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_token: \"\"\n}; //This function sets up the clientID and secret depending on which platform is specified\n\nconst setupCredentials = source => {\n  let required_clientID = \"\";\n  let required_secret = \"\";\n\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return {\n    clientID: required_clientID,\n    secret: required_secret\n  };\n}; //Get the Spotify access token\n\n\nconst fetchSpotifyToken = searchData => {\n  let token = \"\"; //The Spotify token will be returned with this variable\n\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n\n  console.log(stringToEncode); //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n\n  fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`\n    },\n    body: \"grant_type=client_credentials\"\n  }).then(tokenResponse => {\n    if (tokenResponse.ok) console.log(\"Successful\");else console.log(\"Not successful\");\n    return tokenResponse.json(); //Response body comes as a \"readable stream\". Need to convert the response to json to be able to read the data\n  }).then(data => {\n    console.log(data);\n  }).catch(error => {\n    console.log(error);\n  });\n  return token;\n}; //Get the Apple Music access token\n\n\nconst fetchAppleToken = searchData => {};\n\nexport const setupToken = source => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n\n  console.log(searchData);\n  let token = \"\"; //Variable used to hold access token from source platform\n  //Get the access token from the right api based on the source\n\n  if (source === \"spotify\") {\n    token = fetchSpotifyToken(searchData);\n  } else if (source === \"apple\") {\n    token = fetchAppleToken(searchData);\n  }\n\n  return { ...searchData,\n    token\n  };\n};","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist_transfer/src/models/webService.js"],"names":["Buffer","credentials","spotify_clientID","spotify_secret","spotify_token","apple_clientID","apple_secret","apple_token","setupCredentials","source","required_clientID","required_secret","clientID","secret","fetchSpotifyToken","searchData","token","stringToEncode","console","log","fetch","method","headers","Authorization","from","toString","body","then","tokenResponse","ok","json","data","catch","error","fetchAppleToken","setupToken"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,gBAAgB,EAAE,kCADA;AAElBC,EAAAA,cAAc,EAAE,kCAFE;AAGlBC,EAAAA,aAAa,EAAE,EAHG;AAIlBC,EAAAA,cAAc,EAAE,EAJE;AAKlBC,EAAAA,YAAY,EAAE,EALI;AAMlBC,EAAAA,WAAW,EAAE;AANK,CAApB,C,CASA;;AACA,MAAMC,gBAAgB,GAAIC,MAAD,IAAY;AACnC,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,eAAe,GAAG,EAAtB;;AAEA,MAAIF,MAAM,KAAK,SAAf,EAA0B;AACtBC,IAAAA,iBAAiB,GAAGT,WAAW,CAACC,gBAAhC;AACAS,IAAAA,eAAe,GAAGV,WAAW,CAACE,cAA9B;AACH,GAHD,MAIK,IAAGM,MAAM,KAAK,OAAd,EAAuB;AACxBC,IAAAA,iBAAiB,GAAGT,WAAW,CAACI,cAAhC;AACAM,IAAAA,eAAe,GAAGV,WAAW,CAACK,YAA9B;AACH;;AAED,SAAO;AAAEM,IAAAA,QAAQ,EAAEF,iBAAZ;AAA+BG,IAAAA,MAAM,EAAEF;AAAvC,GAAP;AACD,CAdD,C,CAgBA;;;AACA,MAAMG,iBAAiB,GAAIC,UAAD,IAAgB;AACxC,MAAIC,KAAK,GAAG,EAAZ,CADwC,CACxB;;AAChB,MAAIC,cAAc,GAAI,GAAEF,UAAU,CAACH,QAAS,IAAGG,UAAU,CAACF,MAAO,EAAjE,CAFwC,CAE4B;;AACpEK,EAAAA,OAAO,CAACC,GAAR,CAAYF,cAAZ,EAHwC,CAKxC;;AACAG,EAAAA,KAAK,CAAC,wCAAD,EAA2C;AAC9CC,IAAAA,MAAM,EAAE,MADsC;AAE9CC,IAAAA,OAAO,EAAE;AACP,sBAAgB,mCADT;AAEPC,MAAAA,aAAa,EAAG,SAAQvB,MAAM,CAACwB,IAAP,CAAYP,cAAZ,EAA4BQ,QAA5B,CAAqC,QAArC,CAA+C;AAFhE,KAFqC;AAM9CC,IAAAA,IAAI,EAAE;AANwC,GAA3C,CAAL,CAQGC,IARH,CAQSC,aAAD,IAAmB;AACvB,QAAIA,aAAa,CAACC,EAAlB,EAAsBX,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAtB,KACKD,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACL,WAAOS,aAAa,CAACE,IAAd,EAAP,CAHuB,CAGM;AAC9B,GAZH,EAaGH,IAbH,CAaSI,IAAD,IAAU;AACdb,IAAAA,OAAO,CAACC,GAAR,CAAYY,IAAZ;AACD,GAfH,EAgBGC,KAhBH,CAgBUC,KAAD,IAAW;AAChBf,IAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACD,GAlBH;AAoBA,SAAOjB,KAAP;AACD,CA3BD,C,CA6BA;;;AACA,MAAMkB,eAAe,GAAInB,UAAD,IAAgB,CAAE,CAA1C;;AAEA,OAAO,MAAMoB,UAAU,GAAI1B,MAAD,IAAY;AACpC,MAAIM,UAAU,GAAGP,gBAAgB,CAACC,MAAD,CAAjC,CADoC,CACO;;AAC3CS,EAAAA,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ,CAHoC,CAGpB;AAEhB;;AACA,MAAIP,MAAM,KAAK,SAAf,EAA0B;AACxBO,IAAAA,KAAK,GAAGF,iBAAiB,CAACC,UAAD,CAAzB;AACD,GAFD,MAEO,IAAIN,MAAM,KAAK,OAAf,EAAwB;AAC7BO,IAAAA,KAAK,GAAGkB,eAAe,CAACnB,UAAD,CAAvB;AACD;;AAED,SAAO,EAAE,GAAGA,UAAL;AAAiBC,IAAAA;AAAjB,GAAP;AACD,CAbM","sourcesContent":["import { Buffer } from \"buffer\";\n\n//List used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  spotify_token: \"\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_token: \"\",\n};\n\n//This function sets up the clientID and secret depending on which platform is specified\nconst setupCredentials = (source) => {\n  let required_clientID = \"\";\n  let required_secret = \"\";\n\n  if (source === \"spotify\") {\n      required_clientID = credentials.spotify_clientID;\n      required_secret = credentials.spotify_secret;\n  }\n  else if(source === \"apple\") {\n      required_clientID = credentials.apple_clientID;\n      required_secret = credentials.apple_secret;\n  }\n\n  return { clientID: required_clientID, secret: required_secret };\n};\n\n//Get the Spotify access token\nconst fetchSpotifyToken = (searchData) => {\n  let token = \"\"; //The Spotify token will be returned with this variable\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  console.log(stringToEncode);\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json(); //Response body comes as a \"readable stream\". Need to convert the response to json to be able to read the data\n    })\n    .then((data) => {\n      console.log(data);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return token;\n};\n\n//Get the Apple Music access token\nconst fetchAppleToken = (searchData) => {};\n\nexport const setupToken = (source) => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n  console.log(searchData);\n  let token = \"\"; //Variable used to hold access token from source platform\n\n  //Get the access token from the right api based on the source\n  if (source === \"spotify\") {\n    token = fetchSpotifyToken(searchData);\n  } else if (source === \"apple\") {\n    token = fetchAppleToken(searchData);\n  }\n\n  return { ...searchData, token };\n};\n"]},"metadata":{},"sourceType":"module"}