{"ast":null,"code":"import { Buffer } from \"buffer\"; //List used to store the clientIDs and secrets of the various platforms\n\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_playlistID_regex: \"\"\n}; //L\n\nconst regexes = {}; //This function sets up the clientID and secret depending on which platform is specified\n\nconst setupCredentials = source => {\n  let required_clientID = \"\";\n  let required_secret = \"\"; //Select the correct values\n\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return {\n    clientID: required_clientID,\n    secret: required_secret\n  };\n}; //Get the Spotify access token\n\n\nconst fetchSpotifyToken = searchData => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n\n  let token; //Variable that will hold the promise returned by the fetch function\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`\n    },\n    body: \"grant_type=client_credentials\"\n  }).then(tokenResponse => {\n    if (tokenResponse.ok) console.log(\"Successful\");else console.log(\"Not successful\");\n    return tokenResponse.json();\n  }).catch(error => {\n    console.log(error);\n  });\n  return tokenResponse; //Return the promise that the fetch function returns\n}; //Get the Apple Music access token\n\n\nconst fetchAppleToken = searchData => {}; //Function to get the required credentials (client ID, secret, and access token)\n//Made it an async function so that we can wait for the fetching of the access token to finish before returning it\n\n\nexport const setupToken = async source => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n\n  let tokenPromise; //Variable that will hold the promise returned from the fetch API\n\n  let token = \"\"; //Variable used to hold access token from source platform\n  //Get the access token from the right api based on the source\n\n  if (source === \"spotify\") {\n    tokenPromise = await fetchSpotifyToken(searchData); //await will make the code wait for the fetch function to resolve/reject the promise, but for it to work it needs to return a promise\n  } else if (source === \"apple\") {\n    tokenPromise = await fetchAppleToken(searchData);\n  }\n\n  token = tokenPromise.access_token;\n  return { ...searchData,\n    token\n  };\n};\nexport const fetchPlaylist = (link, token, source) => {\n  //Extract the playlist ID from the share link\n  if (source === \"spotify\") {\n    const playlistID = link.match(/(?<=t\\/)(.*?)(?=\\?)/);\n    console.log(playlistID);\n  }\n};","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist_transfer/src/models/webService.js"],"names":["Buffer","credentials","spotify_clientID","spotify_secret","apple_clientID","apple_secret","apple_playlistID_regex","regexes","setupCredentials","source","required_clientID","required_secret","clientID","secret","fetchSpotifyToken","searchData","stringToEncode","token","tokenResponse","fetch","method","headers","Authorization","from","toString","body","then","ok","console","log","json","catch","error","fetchAppleToken","setupToken","tokenPromise","access_token","fetchPlaylist","link","playlistID","match"],"mappings":"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","sourcesContent":["import { Buffer } from \"buffer\";\n\n//List used to store the clientIDs and secrets of the various platforms\nconst credentials = {\n  spotify_clientID: \"9a5c9f439d464286b0b08e0f40de4f4a\",\n  spotify_secret: \"c24f98c34e26485db177b530895c1769\",\n  apple_clientID: \"\",\n  apple_secret: \"\",\n  apple_playlistID_regex: \"\",\n};\n\n//L\nconst regexes = {\n\n}\n//This function sets up the clientID and secret depending on which platform is specified\nconst setupCredentials = (source) => {\n  let required_clientID = \"\";\n  let required_secret = \"\";\n\n  //Select the correct values\n  if (source === \"spotify\") {\n    required_clientID = credentials.spotify_clientID;\n    required_secret = credentials.spotify_secret;\n  } else if (source === \"apple\") {\n    required_clientID = credentials.apple_clientID;\n    required_secret = credentials.apple_secret;\n  }\n\n  return { clientID: required_clientID, secret: required_secret };\n};\n\n//Get the Spotify access token\nconst fetchSpotifyToken = (searchData) => {\n  let stringToEncode = `${searchData.clientID}:${searchData.secret}`; //Encoded client ID and secret needed to get access token\n  let token; //Variable that will hold the promise returned by the fetch function\n\n  //Headers and body set up according to how Spotify requires it (https://developer.spotify.com/documentation/general/guides/authorization/client-credentials/)\n  let tokenResponse = fetch(\"https://accounts.spotify.com/api/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/x-www-form-urlencoded\",\n      Authorization: `Basic ${Buffer.from(stringToEncode).toString(\"base64\")}`,\n    },\n    body: \"grant_type=client_credentials\",\n  })\n    .then((tokenResponse) => {\n      if (tokenResponse.ok) console.log(\"Successful\");\n      else console.log(\"Not successful\");\n      return tokenResponse.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return tokenResponse; //Return the promise that the fetch function returns\n};\n\n//Get the Apple Music access token\nconst fetchAppleToken = (searchData) => {};\n\n//Function to get the required credentials (client ID, secret, and access token)\n//Made it an async function so that we can wait for the fetching of the access token to finish before returning it\nexport const setupToken = async (source) => {\n  let searchData = setupCredentials(source); //Object containing the required clientID and secret\n  let tokenPromise; //Variable that will hold the promise returned from the fetch API\n  let token = \"\"; //Variable used to hold access token from source platform\n\n  //Get the access token from the right api based on the source\n  if (source === \"spotify\") {\n    tokenPromise = await fetchSpotifyToken(searchData); //await will make the code wait for the fetch function to resolve/reject the promise, but for it to work it needs to return a promise\n  } else if (source === \"apple\") {\n    tokenPromise = await fetchAppleToken(searchData);\n  }\n\n  token = tokenPromise.access_token;\n  return { ...searchData, token };\n};\n\nexport const fetchPlaylist = (link, token, source) => {\n  //Extract the playlist ID from the share link\n  if (source === \"spotify\") {\n    const playlistID = link.match(/(?<=t\\/)(.*?)(?=\\?)/); \n    console.log(playlistID);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}