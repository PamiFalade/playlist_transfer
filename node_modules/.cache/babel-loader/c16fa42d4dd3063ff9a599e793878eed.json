{"ast":null,"code":"var _jsxFileName = \"/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/Landing.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from \"react\";\nimport \"./Views/LandingViews.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useFormik } from \"formik\";\nimport { Buffer } from \"buffer\";\nimport { fetchPlaylist, setupToken, fetchTracks } from \"./models/webService\"; //TO-DO: Finish up styling of track display, and figure out how to surpass the 100 song limit\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Landing = () => {\n  _s();\n\n  var _playlist$tracks;\n\n  //show variable for displaying the modal that takes the playlist link and call the handleTransfer function\n  const [showLinkModal, setShowLinkModal] = useState(false);\n\n  const handleShowLinkModal = () => setShowLinkModal(true);\n\n  const handleCloseLinkModal = () => setShowLinkModal(false); //show variable for displaying the modal that displays the playlist that was fetched from the source platform\n\n\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const handleShowConfirmModal = () => setShowConfirmModal(true);\n\n  const handleCloseConfirmModal = () => setShowConfirmModal(false); //source and dest variables to represent the origin platform and destination platform of the playlist respectively\n\n\n  const [source, setSource] = useState(\"\");\n  const [dest, setDest] = useState(\"\"); //sets source and dest variables\n\n  const handleTransfer = (source, dest) => {\n    setSource(source);\n    setDest(dest);\n  }; //variable to hold the access token\n\n\n  const [sourceToken, setSourceToken] = useState(\"\"); //Link that has been entered into\n\n  const playlistLink = \"\"; //Object that will hold relevant info on the playlist to be transferred\n\n  const [playlist, setPlaylist] = useState({\n    name: \"\",\n    image: \"\",\n    owner: \"\",\n    tracks: []\n  });\n\n  setPlaylist = (fetchedName, fetchedImage, fetchedOwner, fetchedTracks) => {\n    playlist.name = fetchedName;\n    playlist.image = fetchedImage;\n    playlist.owner = fetchedOwner;\n    playlist.tracks = fetchedTracks;\n  }; //Formik to manage and validate inputted link\n\n\n  const initialValues = {\n    link: \"\"\n  };\n\n  const onSubmit = values => {\n    //Step 1: get access token for source platform\n    setupToken(source).then(promise => {\n      //By making setupToken an async function, you made it so that it returns a promise. So, it needs to be treated as such\n      setSourceToken(promise.token); //Use this function to notify when source token has been updated\n      //Step 2: retrieve playlist from source platform\n\n      fetchPlaylist(values.link, promise.token, source).then(retrievedPlaylist => {\n        let limit = retrievedPlaylist.tracks.limit; //The limit for the number of tracks that could be fetched\n\n        let foundPlaylist = {\n          //I initially tried just having a global playlist object variable and updating it with these values\n          name: retrievedPlaylist.name,\n          //But its attributes didn't seem to be updating in time before the modal would be rendered\n          image: retrievedPlaylist.images[1].url,\n          //The useState function triggers a re-render of the DOM, so that's what you should use so that the DOM re-renders when those variables have been updated\n          owner: retrievedPlaylist.owner.display_name,\n          //Lesson learned: that's why you should use the state for data that needs to be kept track of and needs to be rendered (it's just better and easier to manage)\n          tracks: retrievedPlaylist.tracks.items.map(song => {\n            return {\n              songName: song.track.name,\n              isExplicit: song.track.explicit,\n              songAlbum: song.track.album.name,\n              songAlbumImg: song.track.album.images[2],\n              songArtists: [...song.track.artists],\n              sourceURI: song.track.uri,\n              destURI: \"\"\n            };\n          })\n        };\n        fetchTracks(values.link, promise.token, source, limit).then(tracksResponse => {\n          let extraTracks = tracksResponse.items.map(song => {\n            return {\n              songName: song.track.name,\n              isExplicit: song.track.explicit,\n              songAlbum: song.track.album.name,\n              songAlbumImg: song.track.album.images[2],\n              songArtists: [...song.track.artists],\n              sourceURI: song.track.uri,\n              destURI: \"\"\n            };\n          });\n          setPlaylist(foundPlaylist.name, foundPlaylist.image, foundPlaylist.owner, foundPlaylist.tracks.concat(extraTracks));\n        }).then(console.log(foundPlaylist.tracks)); // setPlaylist(foundPlaylist);\n      }).then(() => {\n        handleShowConfirmModal();\n      }).catch(error => console.log(error));\n    }); //Step 2: retrieve playlist from source platform\n  };\n\n  const validate = values => {\n    let errors = {};\n\n    if (!values.link) {}\n  };\n\n  const linkForm = useFormik({\n    initialValues,\n    onSubmit,\n    validate\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      className: \"Landing\",\n      border: \"primary\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: /*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"Welcome!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"LandingBody\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          border: \"primary\",\n          className: \"transferOption\",\n          onClick: () => {\n            handleShowLinkModal();\n            handleTransfer(\"apple\", \"spotify\");\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://pbs.twimg.com/profile_images/1431129444362579971/jGrgSKDD_400x400.jpg\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://toppng.com/uploads/preview/right-arrow-icon-ico-11562931718i8rqgsef9d.png\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/800px-Spotify_logo_without_text.svg.png\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          border: \"primary\",\n          className: \"transferOption\",\n          onClick: () => {\n            handleShowLinkModal();\n            handleTransfer(\"spotify\", \"apple\");\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/800px-Spotify_logo_without_text.svg.png\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://toppng.com/uploads/preview/right-arrow-icon-ico-11562931718i8rqgsef9d.png\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://pbs.twimg.com/profile_images/1431129444362579971/jGrgSKDD_400x400.jpg\",\n              className: \"Logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showLinkModal,\n      onHide: handleCloseLinkModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Let's transfer!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: () => {\n            handleCloseLinkModal();\n            linkForm.handleSubmit();\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Share Link for Playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            name: \"link\",\n            id: \"link\",\n            type: \"url\",\n            placeholder: \"Enter the link to the playlist\",\n            onChange: linkForm.handleChange,\n            value: linkForm.values.link\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleCloseLinkModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            handleCloseLinkModal();\n            linkForm.handleSubmit();\n          },\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showConfirmModal,\n      onHide: handleCloseConfirmModal,\n      backdrop: \"static\",\n      contentClassName: \"PlaylistDisplayModal\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"This Playlist?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        className: \"PlaylistDisplayModalBody\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leftSide\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlist.image,\n            alt: \"Playlist Cover\",\n            width: \"100%\",\n            height: \"100%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: playlist.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rightSide\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trackList\",\n            children: (_playlist$tracks = playlist.tracks) === null || _playlist$tracks === void 0 ? void 0 : _playlist$tracks.map((song, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trackDisplay\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: song.songAlbumImg.url\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: song.songName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleCloseConfirmModal,\n          children: \"Nope\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleCloseConfirmModal,\n          children: \"Yes!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Landing, \"2eFPA4DVwygHvEI/yeIydbEH7U8=\", false, function () {\n  return [useFormik];\n});\n\n_c = Landing;\nexport default Landing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Landing\");","map":{"version":3,"sources":["/Users/pamilerinfalade/Desktop/FrontEnd_Challenges/playlist-transfer/src/Landing.js"],"names":["React","useState","Card","Modal","Button","Form","useFormik","Buffer","fetchPlaylist","setupToken","fetchTracks","Landing","showLinkModal","setShowLinkModal","handleShowLinkModal","handleCloseLinkModal","showConfirmModal","setShowConfirmModal","handleShowConfirmModal","handleCloseConfirmModal","source","setSource","dest","setDest","handleTransfer","sourceToken","setSourceToken","playlistLink","playlist","setPlaylist","name","image","owner","tracks","fetchedName","fetchedImage","fetchedOwner","fetchedTracks","initialValues","link","onSubmit","values","then","promise","token","retrievedPlaylist","limit","foundPlaylist","images","url","display_name","items","map","song","songName","track","isExplicit","explicit","songAlbum","album","songAlbumImg","songArtists","artists","sourceURI","uri","destURI","tracksResponse","extraTracks","concat","console","log","catch","error","validate","errors","linkForm","handleSubmit","handleChange","index"],"mappings":"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","sourcesContent":["import { React, useState } from \"react\";\nimport \"./Views/LandingViews.css\";\nimport Card from \"react-bootstrap/Card\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { useFormik } from \"formik\";\nimport { Buffer } from \"buffer\";\nimport { fetchPlaylist, setupToken, fetchTracks } from \"./models/webService\";\n\n//TO-DO: Finish up styling of track display, and figure out how to surpass the 100 song limit\n\nconst Landing = () => {\n  //show variable for displaying the modal that takes the playlist link and call the handleTransfer function\n  const [showLinkModal, setShowLinkModal] = useState(false);\n  const handleShowLinkModal = () => setShowLinkModal(true);\n  const handleCloseLinkModal = () => setShowLinkModal(false);\n\n  //show variable for displaying the modal that displays the playlist that was fetched from the source platform\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const handleShowConfirmModal = () => setShowConfirmModal(true);\n  const handleCloseConfirmModal = () => setShowConfirmModal(false);\n\n  //source and dest variables to represent the origin platform and destination platform of the playlist respectively\n  const [source, setSource] = useState(\"\");\n  const [dest, setDest] = useState(\"\");\n  //sets source and dest variables\n  const handleTransfer = (source, dest) => {\n    setSource(source);\n    setDest(dest);\n  };\n\n  //variable to hold the access token\n  const [sourceToken, setSourceToken] = useState(\"\");\n\n  //Link that has been entered into\n  const playlistLink = \"\";\n  //Object that will hold relevant info on the playlist to be transferred\n  const [playlist, setPlaylist] = useState({\n    name: \"\",\n    image: \"\",\n    owner: \"\",\n    tracks: [],\n  });\n  setPlaylist = (fetchedName, fetchedImage, fetchedOwner, fetchedTracks) => {\n    playlist.name = fetchedName;\n    playlist.image = fetchedImage;\n    playlist.owner = fetchedOwner;\n    playlist.tracks = fetchedTracks;\n  };\n\n  //Formik to manage and validate inputted link\n  const initialValues = {\n    link: \"\",\n  };\n\n  const onSubmit = (values) => {\n    //Step 1: get access token for source platform\n    setupToken(source).then((promise) => {\n      //By making setupToken an async function, you made it so that it returns a promise. So, it needs to be treated as such\n      setSourceToken(promise.token); //Use this function to notify when source token has been updated\n\n      //Step 2: retrieve playlist from source platform\n      fetchPlaylist(values.link, promise.token, source)\n        .then((retrievedPlaylist) => {\n          let limit = retrievedPlaylist.tracks.limit; //The limit for the number of tracks that could be fetched\n\n          let foundPlaylist = {\n            //I initially tried just having a global playlist object variable and updating it with these values\n            name: retrievedPlaylist.name, //But its attributes didn't seem to be updating in time before the modal would be rendered\n            image: retrievedPlaylist.images[1].url, //The useState function triggers a re-render of the DOM, so that's what you should use so that the DOM re-renders when those variables have been updated\n            owner: retrievedPlaylist.owner.display_name, //Lesson learned: that's why you should use the state for data that needs to be kept track of and needs to be rendered (it's just better and easier to manage)\n            tracks: retrievedPlaylist.tracks.items.map((song) => {\n              return {\n                songName: song.track.name,\n                isExplicit: song.track.explicit,\n                songAlbum: song.track.album.name,\n                songAlbumImg: song.track.album.images[2],\n                songArtists: [...song.track.artists],\n                sourceURI: song.track.uri,\n                destURI: \"\",\n              };\n            }),\n          };\n\n          fetchTracks(values.link, promise.token, source, limit)\n            .then((tracksResponse) => {\n              let extraTracks = tracksResponse.items.map((song) => {\n                return {\n                  songName: song.track.name,\n                  isExplicit: song.track.explicit,\n                  songAlbum: song.track.album.name,\n                  songAlbumImg: song.track.album.images[2],\n                  songArtists: [...song.track.artists],\n                  sourceURI: song.track.uri,\n                  destURI: \"\",\n                };\n              });\n\n              setPlaylist(\n                foundPlaylist.name,\n                foundPlaylist.image,\n                foundPlaylist.owner,\n                foundPlaylist.tracks.concat(extraTracks)\n              );\n            })\n            .then(console.log(foundPlaylist.tracks));\n          // setPlaylist(foundPlaylist);\n        })\n        .then(() => {\n          handleShowConfirmModal();\n        })\n        .catch((error) => console.log(error));\n    });\n\n    //Step 2: retrieve playlist from source platform\n  };\n\n  const validate = (values) => {\n    let errors = {};\n\n    if (!values.link) {\n    }\n  };\n\n  const linkForm = useFormik({ initialValues, onSubmit, validate });\n\n  return (\n    <div>\n      <Card className=\"Landing\" border=\"primary\">\n        <Card.Header>\n          <Card.Title>Welcome!</Card.Title>\n        </Card.Header>\n        <Card.Body className=\"LandingBody\">\n          <Card\n            border=\"primary\"\n            className=\"transferOption\"\n            onClick={() => {\n              handleShowLinkModal();\n              handleTransfer(\"apple\", \"spotify\");\n            }}\n          >\n            <Card.Body>\n              <img\n                src=\"https://pbs.twimg.com/profile_images/1431129444362579971/jGrgSKDD_400x400.jpg\"\n                className=\"Logo\"\n              />\n              <img\n                src=\"https://toppng.com/uploads/preview/right-arrow-icon-ico-11562931718i8rqgsef9d.png\"\n                className=\"Logo\"\n              />\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/800px-Spotify_logo_without_text.svg.png\"\n                className=\"Logo\"\n              />\n            </Card.Body>\n          </Card>\n          <Card\n            border=\"primary\"\n            className=\"transferOption\"\n            onClick={() => {\n              handleShowLinkModal();\n              handleTransfer(\"spotify\", \"apple\");\n            }}\n          >\n            <Card.Body>\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/19/Spotify_logo_without_text.svg/800px-Spotify_logo_without_text.svg.png\"\n                className=\"Logo\"\n              />\n              <img\n                src=\"https://toppng.com/uploads/preview/right-arrow-icon-ico-11562931718i8rqgsef9d.png\"\n                className=\"Logo\"\n              />\n              <img\n                src=\"https://pbs.twimg.com/profile_images/1431129444362579971/jGrgSKDD_400x400.jpg\"\n                className=\"Logo\"\n              />\n            </Card.Body>\n          </Card>\n        </Card.Body>\n      </Card>\n\n      <Modal show={showLinkModal} onHide={handleCloseLinkModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Let's transfer!</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form\n            onSubmit={() => {\n              handleCloseLinkModal();\n              linkForm.handleSubmit();\n            }}\n          >\n            <Form.Label>Share Link for Playlist</Form.Label>\n            <Form.Control\n              name=\"link\"\n              id=\"link\"\n              type=\"url\"\n              placeholder=\"Enter the link to the playlist\"\n              onChange={linkForm.handleChange}\n              value={linkForm.values.link}\n            />\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseLinkModal}>\n            Close\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              handleCloseLinkModal();\n              linkForm.handleSubmit();\n            }}\n            type=\"submit\"\n          >\n            Submit\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal\n        show={showConfirmModal}\n        onHide={handleCloseConfirmModal}\n        backdrop=\"static\"\n        contentClassName=\"PlaylistDisplayModal\"\n      >\n        <Modal.Header>\n          <Modal.Title>This Playlist?</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body className=\"PlaylistDisplayModalBody\">\n          <div className=\"leftSide\">\n            <img\n              src={playlist.image}\n              alt=\"Playlist Cover\"\n              width=\"100%\"\n              height=\"100%\"\n            />\n            <h1>{playlist.name}</h1>\n          </div>\n          <div className=\"rightSide\">\n            <div className=\"trackList\">\n              {/* Kept getting: \"Uncaught TypeError: Cannot read properties of undefined (reading 'map')\" without the question mark\n                    The question mark checks that the array exists first before executing the map function*/}\n              {playlist.tracks?.map((song, index) => (\n                <div className=\"trackDisplay\" key={index}>\n                  <img src={song.songAlbumImg.url} />\n                  <p>{song.songName}</p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseConfirmModal}>\n            Nope\n          </Button>\n          <Button variant=\"primary\" onClick={handleCloseConfirmModal}>\n            Yes!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nexport default Landing;\n"]},"metadata":{},"sourceType":"module"}